class Solution {
public:
    long long maxEle(vector<int>&piles){
        long long ele = piles[0];
        for(int i =1;i<piles.size();i++){
            if(ele<piles[i]){
                ele = piles[i];
            }
        }
        return ele;
    }

    long long hoursReq(vector<int>&piles, int mid){
        long long totalHrs = 0;
      for(int i =0;i<piles.size();i++){
        // totalHrs += ceil(double(piles[i])/double(mid));
        totalHrs += (piles[i] + mid - 1) / mid;

      }
      return totalHrs;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        long long maxElement = maxEle(piles);
        int low  = 1;
        int high = maxElement;
        int ans = high;

        while(low<=high){
            long long mid = (low+high)/2;
            long long hours = hoursReq(piles,mid);

           if(hours<=h){
             ans = mid;
             high = mid-1;
           }else{
            low = mid+1;
           }
        }
        return ans;
    }

};
