/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
     ListNode* middleNode(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
         
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow;
     }

     ListNode* merge(ListNode* list1, ListNode* list2){
         ListNode* dummy = new ListNode(0);
         ListNode* temp = dummy;

         while(list1!=NULL && list2!=NULL){
             if(list1->val <=list2->val){
                temp->next = list1;
                list1 = list1->next;
             }else{
                temp->next = list2;
                list2 = list2->next;
             }
             temp = temp->next;
         }

         while(list1!=NULL){
            temp->next = list1;
            list1 = list1->next;
            temp = temp->next;
         }
         while(list2!=NULL){
            temp->next = list2;
            list2 = list2->next;
            temp = temp->next;
         }

         return dummy->next;
     }

    ListNode* sortList(ListNode* head) {
        ListNode* temp = head;
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* middle;
        middle = middleNode(head);
        ListNode* leftHead = head;
        ListNode* rightHead = middle->next;
         middle->next = NULL;
        leftHead = sortList(leftHead);
        rightHead = sortList(rightHead);

         return merge(leftHead,rightHead);

    }
};
