/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        // Optimized approach
       if(head==NULL || head->next==NULL) return NULL;
        ListNode* slow  = head;
        ListNode* fast = head;

        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;

            if(slow == fast){
                slow = head;

                while(slow!=fast){
                    slow = slow->next;
                    fast = fast->next;
                }
                return slow;
            }
        }

        //Brute force approach
        // unordered_map<ListNode*, int>mpp;
        // ListNode* temp = head;

        // while(temp!=NULL){
        //     if(mpp.find(temp)!=mpp.end()){
        //         return temp;
        //     }

        //     mpp[temp]++;
        //     temp = temp->next;
        // }
        return NULL;
    }
};
